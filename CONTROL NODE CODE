#define BLYNK_TEMPLATE_ID "TMPL6y3qJl8Rp"
#define BLYNK_TEMPLATE_NAME "WaterHeater"
#define BLYNK_AUTH_TOKEN "v4iwmF8-rzOTczHEoWbfdlTb5f5XDcK0"

#include <WiFi.h>
#include <WiFiClient.h>
#include <BlynkSimpleEsp32.h>
#include <PubSubClient.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <AsyncTCP.h>
#include <ESPAsyncWebServer.h>
#include <ArduinoJson.h>

// OLED Setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
#define OLED_ADDR 0x3C
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Relay and thresholds
#define RELAY_PIN 5
#define DESIRED_TEMP 50.0
#define SAFETY_TEMP 70.0

// WiFi and MQTT credentials
char ssid[] = "A14";
char pass[] = "12345678";
const char* mqttServer = "broker.hivemq.com";
const int mqttPort = 1883;

WiFiClient espClient;
PubSubClient mqttClient(espClient);
AsyncWebServer server(80);

// State variables
float lastTemp = 0;
bool relayOn = false;
bool manualMode = false;

void setup() {
  Serial.begin(115200);
  pinMode(RELAY_PIN, OUTPUT);
  digitalWrite(RELAY_PIN, LOW);
  Wire.begin(21, 22); // SDA, SCL

  if (!display.begin(SSD1306_SWITCHCAPVCC, OLED_ADDR)) {
    Serial.println("OLED init failed");
    while (1);
  }

  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setCursor(0, 0);
  display.println("Booting...");
  display.display();

  WiFi.begin(ssid, pass);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500); Serial.print(".");
  }
  Serial.println("WiFi connected");

  Blynk.begin(BLYNK_AUTH_TOKEN, ssid, pass);
  mqttClient.setServer(mqttServer, mqttPort);
  mqttClient.setCallback(mqttCallback);
  mqttClient.setBufferSize(512);

  setupWebDashboard();
}

void loop() {
  Blynk.run();
  if (!mqttClient.connected()) reconnectMQTT();
  mqttClient.loop();
}

// MQTT message received
void mqttCallback(char* topic, byte* payload, unsigned int length) {
  String msg;
  for (unsigned int i = 0; i < length; i++) msg += (char)payload[i];

  if (String(topic) == "waterheater/sensor/temperature") {
    float temp = extractTemperature(msg);
    if (temp > -100 && temp < 150) {
      handleTemperature(temp);
    }
  }
}

// Extract JSON or plain number
float extractTemperature(String jsonStr) {
  StaticJsonDocument<128> doc;
  DeserializationError err = deserializeJson(doc, jsonStr);
  if (!err && doc.containsKey("temperature_celsius")) {
    return doc["temperature_celsius"];
  } else {
    jsonStr.trim();
    return jsonStr.toFloat();
  }
}

// Process temperature
void handleTemperature(float temp) {
  lastTemp = temp;

  if (!manualMode) {
    relayOn = (temp < DESIRED_TEMP);
    digitalWrite(RELAY_PIN, relayOn ? HIGH : LOW);
    Blynk.virtualWrite(V1, relayOn ? 1 : 0);
  }

  updateOLED();
  updateBlynk();

  if (temp > SAFETY_TEMP) {
    mqttClient.publish("waterheater/alerts/overheat", "{\"alert\":\"Overheat\"}");
  }
}

void updateOLED() {
  display.clearDisplay();
  display.setCursor(0, 0);
  display.printf("Temp: %.1f C\n", lastTemp);
  display.setCursor(0, 20);
  display.printf("Relay: %s\n", relayOn ? "ON" : "OFF");
  display.setCursor(0, 40);
  display.printf("Mode: %s\n", manualMode ? "Manual" : "Auto");
  display.display();
}

void updateBlynk() {
  Blynk.virtualWrite(V0, lastTemp);                    // V0 = Temperature
  Blynk.virtualWrite(V2, relayOn ? "ON" : "OFF");      // V2 = Status
}

// Relay control from Blynk (V1)
BLYNK_WRITE(V1) {
  if (!manualMode) return;
  int btn = param.asInt();
  relayOn = btn;
  digitalWrite(RELAY_PIN, btn ? HIGH : LOW);
  updateOLED();
  updateBlynk();
}

// Mode toggle from Blynk (V3)
BLYNK_WRITE(V3) {
  manualMode = (param.asInt() == 1);
  handleTemperature(lastTemp);
}

// Reconnect MQTT
void reconnectMQTT() {
  while (!mqttClient.connected()) {
    if (mqttClient.connect("ESP32_CONTROL_NODE")) {
      mqttClient.subscribe("waterheater/sensor/temperature");
    } else {
      delay(2000);
    }
  }
}

// Web Dashboard with Relay + Mode Control
void setupWebDashboard() {
  server.on("/", HTTP_GET, [](AsyncWebServerRequest *request){
    String page = "<html><head><title>Water Heater</title><style>";
    page += "body{font-family:sans-serif;text-align:center;padding-top:30px;background:#f8f8f8;}";
    page += "h2{color:#333;}p{font-size:18px;}button{padding:10px 20px;font-size:16px;margin:5px;}";
    page += "</style></head><body>";
    page += "<h2>Water Heater Dashboard</h2>";
    page += "<p><b>Temperature:</b> " + String(lastTemp, 1) + " &deg;C</p>";
    page += "<p><b>Relay:</b> " + String(relayOn ? "ON" : "OFF") + "</p>";
    page += "<p><b>Mode:</b> " + String(manualMode ? "Manual" : "Auto") + "</p>";

    page += "<p><a href=\"/mode/auto\"><button>Auto Mode</button></a>";
    page += "<a href=\"/mode/manual\"><button>Manual Mode</button></a></p>";

    if (manualMode) {
      page += "<p><a href=\"/relay/on\"><button>Relay ON</button></a>";
      page += "<a href=\"/relay/off\"><button>Relay OFF</button></a></p>";
    }

    page += "</body></html>";
    request->send(200, "text/html", page);
  });

  server.on("/mode/auto", HTTP_GET, [](AsyncWebServerRequest *request){
    manualMode = false;
    handleTemperature(lastTemp);
    request->redirect("/");
  });

  server.on("/mode/manual", HTTP_GET, [](AsyncWebServerRequest *request){
    manualMode = true;
    handleTemperature(lastTemp);
    request->redirect("/");
  });

  server.on("/relay/on", HTTP_GET, [](AsyncWebServerRequest *request){
    if (manualMode) {
      relayOn = true;
      digitalWrite(RELAY_PIN, HIGH);
    }
    request->redirect("/");
  });

  server.on("/relay/off", HTTP_GET, [](AsyncWebServerRequest *request){
    if (manualMode) {
      relayOn = false;
      digitalWrite(RELAY_PIN, LOW);
    }
    request->redirect("/");
  });

  server.begin();
}
